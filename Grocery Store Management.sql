# creating database
create database Grocery_Store;

# using database 
use grocery_store;

# creating supplier table
create table if not exists supplier(
sup_id tinyint primary key,
sup_name varchar(255),
address text
);

# creating categories table 
create table if not exists categories(
cat_id tinyint primary key,
cat_name varchar(255)
);  

# creating employees table 
create table if not exists employees(
emp_id tinyint primary key,
emp_name varchar(255),
hire_date varchar(255)
);

describe employees;

# creating customers table 
create table if not exists customers(
cust_id smallint primary key, 
cust_name varchar(255),
address text
);

# creating products table 
create table if not exists products(
prod_id tinyint primary key,
prod_name varchar(255),
sup_id tinyint,
cat_id tinyint,
price decimal(10,2),
foreign key (sup_id) references supplier(sup_id)
on update cascade 
on delete cascade,
foreign key (cat_id) references  categories(cat_id)
on update cascade 
on delete cascade 
);


# creating orders table 
create table if not exists orders(
ord_id smallint primary key,
cust_id smallint,
emp_id tinyint,
order_date varchar(255),
foreign key (cust_id) references customers(cust_id)
on update cascade
on delete cascade,
foreign key (emp_id) references employees(emp_id)
on update cascade 
on delete cascade
);


# creating order_details table 
create table if not exists order_details(
ord_det_id smallint auto_increment primary key,
ord_id smallint,
prod_id tinyint,
quantity tinyint,
each_price decimal(10,2),
total_price decimal(10,2),
foreign key (ord_id) references orders(ord_id)
on update cascade
on delete cascade,
foreign key (prod_id) references products(prod_id)
on update cascade
on delete cascade
);


# checking data has been imported or not
call all_tables_data; # this is the function that i've created for viewing all tables data

######## Customer Insights ########
-- 1. How many unique customers have placed orders?

# select count(cust_id) from orders ;
# select count(cust_id) from customers;

SELECT 
COUNT(DISTINCT cust_id) AS unique_customers 
FROM orders;

-- 2. Which customers have placed the highest number of orders?

SELECT c.cust_id, c.cust_name, 
COUNT(o.ord_id) AS total_orders
FROM customers c
INNER JOIN orders o
ON c.cust_id=o.cust_id
GROUP BY c.cust_id
ORDER BY total_orders DESC LIMIT 1;


-- 3.What is the total and average purchase value per customer?
call all_tables_data;

SELECT o.cust_id, c.cust_name,
SUM(od.total_price) AS total_purchase,
AVG(od.total_price) AS avg_purchase
FROM orders o
INNER JOIN order_details od
ON o.ord_id= od.ord_id
INNER JOIN customers c
ON o.cust_id= c.cust_id
GROUP BY o.cust_id;


-- 4.	Who are the top 5 customers by total purchase amount?

SELECT o.cust_id, c.cust_name,
SUM(od.total_price) AS total_purchase
FROM orders o
INNER JOIN order_details od
ON o.ord_id= od.ord_id
INNER JOIN customers c
ON o.cust_id= c.cust_id
GROUP BY o.cust_id
ORDER BY total_purchase DESC
LIMIT 5;


######## Product Performance ########
# Evaluate how well products are performing in terms of sales and revenue.

-- 1.	How many products exist in each category?

SELECT c.cat_id, c.cat_name,
COUNT(p.prod_id) AS total_products
FROM categories c
LEFT JOIN products p
ON c.cat_id= p.cat_id
GROUP BY c.cat_id;

-- 2.	What is the average price of products by category?

SELECT c.cat_id, c.cat_name,
AVG(p.price) AS avg_price
FROM categories c
LEFT JOIN products p
ON c.cat_id= p.cat_id
GROUP BY c.cat_id;

-- 3.	Which products have the highest total sales volume (by quantity)?

SELECT p.prod_name,
SUM(quantity) AS high_sales
FROM order_details od
LEFT JOIN products p
ON od.prod_id= p.prod_id
GROUP BY prod_name
ORDER BY high_sales DESC
LIMIT 1;

-- 4.	What is the total revenue generated by each product?

SELECT SUM(od.total_price) AS total_revenue,
p.prod_name
FROM order_details od
LEFT JOIN products p
ON od.prod_id= p.prod_id
GROUP BY prod_name;

-- 5.	How do product sales vary by category and supplier?

SELECT c.cat_name, s.sup_name,
SUM(od.total_price) AS total_sales
FROM order_details od
INNER JOIN products p
ON od.prod_id= p.prod_id
INNER JOIN categories c
ON p.cat_id= c.cat_id
INNER JOIN supplier s
ON p.sup_id= s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY c.cat_name, total_sales 
DESC;


######## Sales and Order Trends ########
# Analyze business performance through orders and revenue over time.

-- 1.	How many orders have been placed in total?

SELECT COUNT(*) AS total_orders
FROM orders;

-- 2.	What is the average value per order?

SELECT SUM(total_price)/COUNT(DISTINCT ord_id) AS avg_ord_value
FROM order_details;

-- 3.   On which dates were the most orders placed?

SELECT order_date, COUNT(ord_id) AS ord_count
FROM orders 
GROUP BY order_date
ORDER BY ord_count DESC
LIMIT 1;

-- 4.	What are the monthly trends in order volume and revenue?

SELECT 
LEFT(o.order_date, 7) AS ord_month,
COUNT(DISTINCT o.ord_id) AS ord_volume,
SUM(od.total_price) AS total_revenue
FROM orders o
INNER JOIN order_details od
ON o.ord_id= od.ord_id
GROUP BY ord_month
ORDER BY ord_month;

-- 5.	How do order patterns vary across weekdays and weekends?
SET Sql_safe_updates=0;

ALTER TABLE orders ADD COLUMN date_converted DATE;
UPDATE orders
SET date_converted = STR_TO_DATE(order_date, '%m/%d/%Y');

SELECT 
DayName (STR_TO_DATE(order_date, "%m/%d/%y")) AS weekday,
MonthName (STR_TO_DATE(order_date, "%m/%d/%y")) AS month_,
COUNT(ord_id) AS total_orders
FROM orders
GROUP BY weekday, month_
ORDER BY weekday, month_;


######## Supplier Contribution ########
# Identify the most active and profitable suppliers.

-- 1.	How many suppliers are there in the database?
SELECT COUNT(*)
FROM Supplier;

-- 2.	Which supplier provides the most products?

SELECT s.sup_id, s.sup_name,
COUNT(p.prod_id) AS product_count
FROM supplier s
INNER JOIN products p
ON s.sup_id= p.sup_id
GROUP BY s.sup_id
ORDER BY product_count DESC
LIMIT 1;

-- 3.	What is the average price of products from each supplier?

SELECT 
s.sup_id, s.sup_name, AVG(p.price)
FROM products p
INNER JOIN
supplier s 
ON s.sup_id = p.sup_id
GROUP BY s.sup_id;

-- 4.	Which suppliers contribute the most to total product sales (by revenue)?

SELECT s.sup_id, s.sup_name,
SUM(od.total_price) AS total_revenue
FROM supplier s
INNER JOIN products p 
ON s.sup_id = p.sup_id
INNER JOIN order_details od
ON p.prod_id= od.prod_id
GROUP BY s.sup_id
ORDER BY total_revenue DESC
LIMIT 1;

######## Employee Performance ########
# Assess how employees are handling and influencing sales.

-- 1.	How many employees have processed orders?

SELECT COUNT(DISTINCT emp_id) 
FROM orders;

-- 2.	Which employees have handled the most orders?

SELECT e.emp_id, e.emp_name ,
COUNT(o.ord_id) AS ordered_most
FROM orders o
INNER JOIN employees e 
ON o.emp_id= e.emp_id
GROUP BY e.emp_id 
ORDER BY ordered_most DESC
LIMIT 1;


-- 3.	What is the total sales value processed by each employee?

SELECT e.emp_id, e.emp_name,
COUNT(od.total_price) AS total_sales
FROM employees e 
INNER JOIN orders o
ON e.emp_id = o.emp_id
INNER JOIN order_details od
ON o.ord_id= od.ord_id
GROUP BY e.emp_id
ORDER BY total_sales DESC;

-- 4.	What is the average order value handled per employee?

SELECT e.emp_id, e.emp_name,
SUM(od.total_price)/COUNT(DISTINCT o.ord_id) AS avg_value
FROM employees e
INNER JOIN orders o
ON e.emp_id= o.emp_id
INNER JOIN order_details od
ON o.ord_id= od.ord_id
GROUP BY e.emp_id
ORDER BY avg_value DESC;


######## Order Details Deep Dive ########
# Explore item-level sales patterns and pricing behavior.

-- 1.	What is the relationship between quantity ordered and total price?

SELECT quantity,
AVG(od.total_price) AS avg_total_price,
COUNT(*) AS order_count
FROM order_details od
GROUP BY quantity
ORDER BY quantity;

-- 2.	What is the average quantity ordered per product?

SELECT p.prod_id, p.prod_name,
COUNT(od.ord_id) AS total_orders,
AVG(od.quantity) AS avg_quantity_ordered
FROM products p
INNER JOIN order_details od
ON p.prod_id= od.prod_id
GROUP BY p.prod_id
ORDER BY avg_quantity_ordered;


-- 3.	How does the unit price vary across products and orders?

SELECT p.prod_id, p.prod_name,
od.each_price AS unit_price,
COUNT(od.ord_id) AS times_ordered
FROM products p
INNER JOIN order_details od
ON p.prod_id= od.prod_id
GROUP BY p.prod_id, od.each_price
ORDER BY p.prod_id, od.each_price;





describe categories;
describe customers;
describe employees;
describe order_details;
describe orders;
describe products;
describe supplier;